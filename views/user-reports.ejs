<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Social Feed</title>
    <style>
        :root {
            --primary-color: #1877f2;
            --secondary-color: #42b72a;
            --bg-color: #f0f2f5;
            --card-bg: #ffffff;
            --text-color: #050505;
            --text-secondary: #65676b;
            --border-color: #dddfe2;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: var(--bg-color);
            color: var(--text-color);
            padding: 20px;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
        }
        
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 20px;
            background-color: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }
        
        .logo {
            font-size: 24px;
            font-weight: bold;
            color: var(--primary-color);
        }
        
        .user-info {
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .logout-btn {
            padding: 8px 16px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        
        .feed {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .post-card {
            background-color: var(--card-bg);
            border-radius: 8px;
            box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            cursor: pointer;
            transition: transform 0.2s;
        }
        
        .post-card:hover {
            transform: translateY(-5px);
        }
        
        .post-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
        }
        
        .post-content {
            padding: 15px;
        }
        
        .post-title {
            font-size: 18px;
            margin-bottom: 10px;
        }
        
        .post-desc {
            color: var(--text-secondary);
            margin-bottom: 10px;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .post-meta {
            display: flex;
            justify-content: space-between;
            color: var(--text-secondary);
            font-size: 14px;
        }
        
        .post-stats {
            display: flex;
            gap: 15px;
            padding: 10px 15px;
            border-top: 1px solid var(--border-color);
        }
        
        .stat {
            display: flex;
            align-items: center;
            gap: 5px;
            cursor: pointer;
        }
        
        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            z-index: 1000;
            overflow-y: auto;
        }
        
        .modal-content {
            background-color: var(--card-bg);
            margin: 50px auto;
            padding: 20px;
            border-radius: 8px;
            max-width: 600px;
            position: relative;
        }
        
        .close-modal {
            position: absolute;
            top: 15px;
            right: 15px;
            font-size: 24px;
            cursor: pointer;
        }
        
        .post-header {
            display: flex;
            align-items: center;
            gap: 10px;
            margin-bottom: 15px;
        }
        
        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--primary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
        }
        
        .post-full-image {
            width: 100%;
            max-height: 400px;
            object-fit: contain;
            margin: 15px 0;
            border-radius: 8px;
        }
        
        .reactions {
            display: flex;
            gap: 15px;
            padding: 15px 0;
            border-top: 1px solid var(--border-color);
            border-bottom: 1px solid var(--border-color);
        }
        
        .reaction-btn {
            display: flex;
            align-items: center;
            gap: 5px;
            padding: 8px 15px;
            border-radius: 20px;
            background-color: var(--bg-color);
            cursor: pointer;
            border: none;
        }
        
        .reaction-btn.active {
            background-color: #e7f3ff;
            color: var(--primary-color);
        }
        
        .comments-section {
            margin-top: 20px;
        }
        
        .comment-form {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .comment-input {
            flex: 1;
            padding: 10px;
            border-radius: 20px;
            border: 1px solid var(--border-color);
            resize: none;
            height: 40px;
        }
        
        .comment-submit {
            padding: 0 20px;
            border-radius: 20px;
            border: none;
            background-color: var(--primary-color);
            color: white;
            cursor: pointer;
        }
        
        .comment-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }
        
        .comment {
            display: flex;
            gap: 10px;
        }
        
        .comment-avatar {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: var(--secondary-color);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 12px;
        }
        
        .comment-content {
            flex: 1;
            background-color: var(--bg-color);
            padding: 10px 15px;
            border-radius: 18px;
        }
        
        .comment-author {
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .comment-text {
            color: var(--text-color);
        }
        
        .mention {
            color: var(--primary-color);
            font-weight: bold;
        }
        
        .notification-badge {
            position: absolute;
            top: -5px;
            right: -5px;
            background-color: red;
            color: white;
            border-radius: 50%;
            width: 18px;
            height: 18px;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .notifications-btn {
            position: relative;
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="logo">SocialApp</div>
            <div class="user-info">
                <button class="notifications-btn" id="notificationsBtn">
                    üîî <span class="notification-badge" id="notificationBadge" style="display: none;">0</span>
                </button>
                <span id="userName">User</span>
                <button class="logout-btn" id="logoutBtn">Logout</button>
            </div>
        </div>
        
        <div class="feed" id="postsFeed">
            <!-- Posts will be loaded here -->
        </div>
    </div>
    
    <!-- Post Modal -->
    <div class="modal" id="postModal">
        <div class="modal-content">
            <span class="close-modal" id="closeModal">&times;</span>
            <div class="post-header">
                <div class="user-avatar" id="modalUserAvatar">U</div>
                <div>
                    <div id="modalUserName">User Name</div>
                    <div id="modalPostTime" class="post-time">Time</div>
                </div>
            </div>
            
            <h2 id="modalPostTitle"></h2>
            <p id="modalPostDesc"></p>
            <img id="modalPostImage" class="post-full-image" src="" alt="Post image">
            
            <div class="reactions">
                <button class="reaction-btn" id="likeBtn">
                    <span>üëç</span> <span id="likeCount">0</span>
                </button>
                <button class="reaction-btn" id="dislikeBtn">
                    <span>üëé</span> <span id="dislikeCount">0</span>
                </button>
            </div>
            
            <div class="comments-section">
                <div class="comment-form">
                    <textarea class="comment-input" id="commentInput" placeholder="Write a comment..."></textarea>
                    <button class="comment-submit" id="commentSubmit">Post</button>
                </div>
                
                <div class="comment-list" id="commentList">
                    <!-- Comments will be loaded here -->
                </div>
            </div>
        </div>
    </div>
    
    <!-- Notifications Modal -->
    <div class="modal" id="notificationsModal">
        <div class="modal-content">
            <span class="close-modal" id="closeNotificationsModal">&times;</span>
            <h2>Notifications</h2>
            <div id="notificationsList">
                <!-- Notifications will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let currentUser = {};
        let currentPost = null;
        let allUsers = [];
        
        // DOM elements
        const postsFeed = document.getElementById('postsFeed');
        const postModal = document.getElementById('postModal');
        const closeModal = document.getElementById('closeModal');
        const likeBtn = document.getElementById('likeBtn');
        const dislikeBtn = document.getElementById('dislikeBtn');
        const likeCount = document.getElementById('likeCount');
        const dislikeCount = document.getElementById('dislikeCount');
        const commentInput = document.getElementById('commentInput');
        const commentSubmit = document.getElementById('commentSubmit');
        const commentList = document.getElementById('commentList');
        const notificationsBtn = document.getElementById('notificationsBtn');
        const notificationBadge = document.getElementById('notificationBadge');
        const notificationsModal = document.getElementById('notificationsModal');
        const closeNotificationsModal = document.getElementById('closeNotificationsModal');
        const notificationsList = document.getElementById('notificationsList');
        const logoutBtn = document.getElementById('logoutBtn');
        const userName = document.getElementById('userName');
        
        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            checkAuth();
            loadUserInfo();
            loadPosts();
            loadAllUsers();
            setupEventListeners();
            checkNotifications();
            
            // Check for notifications every 30 seconds
            setInterval(checkNotifications, 30000);
        });
        
        // Check if user is authenticated
        function checkAuth() {
            // In a real app, you would check for a valid session/token
            // For demo purposes, we'll assume the user is logged in
        }
        
        // Load current user info
        function loadUserInfo() {
            fetch('/api/user')
                .then(response => response.json())
                .then(user => {
                    currentUser = user;
                    userName.textContent = user.jina;
                    document.getElementById('modalUserAvatar').textContent = user.jina.charAt(0);
                })
                .catch(error => {
                    console.error('Error loading user info:', error);
                    window.location.href = '/';
                });
        }
        
        // Load all users for mentions
        function loadAllUsers() {
            fetch('/api/users')
                .then(response => response.json())
                .then(users => {
                    allUsers = users;
                    setupMentionsAutocomplete();
                })
                .catch(error => console.error('Error loading users:', error));
        }
        
        // Setup mentions autocomplete in comment input
        function setupMentionsAutocomplete() {
            commentInput.addEventListener('input', function(e) {
                const value = e.target.value;
                const lastAtPos = value.lastIndexOf('@');
                
                if (lastAtPos > -1) {
                    const currentText = value.substring(lastAtPos + 1);
                    const dropdown = document.getElementById('mentionsDropdown') || createMentionsDropdown();
                    
                    if (currentText.length > 0) {
                        const filteredUsers = allUsers.filter(user => 
                            user.toLowerCase().includes(currentText.toLowerCase())
                        );
                        
                        if (filteredUsers.length > 0) {
                            dropdown.innerHTML = filteredUsers.map(user => 
                                `<div class="mention-option" data-username="${user}">@${user}</div>`
                            ).join('');
                            
                            dropdown.style.display = 'block';
                            
                            // Position dropdown near cursor
                            const cursorPos = getCursorPosition(commentInput);
                            dropdown.style.top = `${cursorPos.y + 20}px`;
                            dropdown.style.left = `${cursorPos.x}px`;
                            
                            // Add click event to options
                            document.querySelectorAll('.mention-option').forEach(option => {
                                option.addEventListener('click', function() {
                                    const username = this.getAttribute('data-username');
                                    const newValue = value.substring(0, lastAtPos + 1) + username + ' ';
                                    commentInput.value = newValue;
                                    dropdown.style.display = 'none';
                                    commentInput.focus();
                                });
                            });
                        } else {
                            dropdown.style.display = 'none';
                        }
                    } else {
                        dropdown.style.display = 'none';
                    }
                } else {
                    const dropdown = document.getElementById('mentionsDropdown');
                    if (dropdown) dropdown.style.display = 'none';
                }
            });
            
            // Hide dropdown when clicking elsewhere
            document.addEventListener('click', function(e) {
                if (e.target !== commentInput) {
                    const dropdown = document.getElementById('mentionsDropdown');
                    if (dropdown) dropdown.style.display = 'none';
                }
            });
        }
        
        function createMentionsDropdown() {
            const dropdown = document.createElement('div');
            dropdown.id = 'mentionsDropdown';
            dropdown.style.cssText = `
                position: absolute;
                background: white;
                border: 1px solid #ccc;
                max-height: 150px;
                overflow-y: auto;
                z-index: 1000;
                display: none;
            `;
            document.body.appendChild(dropdown);
            return dropdown;
        }
        
        function getCursorPosition(textarea) {
            const selectionStart = textarea.selectionStart;
            const div = document.createElement('div');
            const copyStyle = getComputedStyle(textarea);
            
            for (const prop of copyStyle) {
                div.style[prop] = copyStyle[prop];
            }
            
            div.style.position = 'absolute';
            div.style.left = '-9999px';
            div.style.whiteSpace = 'pre-wrap';
            div.style.wordWrap = 'break-word';
            div.textContent = textarea.value.substring(0, selectionStart);
            
            const span = document.createElement('span');
            span.textContent = textarea.value.substring(selectionStart) || '.';
            div.appendChild(span);
            
            document.body.appendChild(div);
            
            const rect = span.getBoundingClientRect();
            const textareaRect = textarea.getBoundingClientRect();
            
            document.body.removeChild(div);
            
            return {
                x: textareaRect.left + rect.left,
                y: textareaRect.top + rect.top
            };
        }
        
        // Load all posts
        function loadPosts() {
            fetch('/api/reports')
                .then(response => response.json())
                .then(data => {
                    renderPosts(data.reports);
                })
                .catch(error => console.error('Error loading posts:', error));
        }
        
        // Render posts in the feed
        function renderPosts(posts) {
            postsFeed.innerHTML = '';
            
            posts.forEach(post => {
                const postElement = document.createElement('div');
                postElement.className = 'post-card';
                postElement.dataset.id = post.id;
                
                let imageHtml = '';
                if (post.image) {
                    imageHtml = `<img src="${post.image}" alt="Post image" class="post-image">`;
                }
                
                postElement.innerHTML = `
                    ${imageHtml}
                    <div class="post-content">
                        <h3 class="post-title">${post.title}</h3>
                        <p class="post-desc">${post.description}</p>
                        <div class="post-meta">
                            <span class="post-author">@${post.username}</span>
                            <span class="post-time">${post.timestamp}</span>
                        </div>
                    </div>
                    <div class="post-stats">
                        <div class="stat">
                            <span>üëç</span> <span>${post.thumbs_up}</span>
                        </div>
                        <div class="stat">
                            <span>üëé</span> <span>${post.thumbs_down}</span>
                        </div>
                        <div class="stat">
                            <span>üí¨</span> <span>${post.comments ? post.comments.length : 0}</span>
                        </div>
                    </div>
                `;
                
                postElement.addEventListener('click', () => openPostModal(post));
                postsFeed.appendChild(postElement);
            });
        }
        
        // Open post modal
        function openPostModal(post) {
            currentPost = post;
            
            // Update modal content
            document.getElementById('modalUserName').textContent = post.username;
            document.getElementById('modalUserAvatar').textContent = post.username.charAt(0);
            document.getElementById('modalPostTime').textContent = post.timestamp;
            document.getElementById('modalPostTitle').textContent = post.title;
            document.getElementById('modalPostDesc').textContent = post.description;
            
            const postImage = document.getElementById('modalPostImage');
            if (post.image) {
                postImage.src = post.image;
                postImage.style.display = 'block';
            } else {
                postImage.style.display = 'none';
            }
            
            likeCount.textContent = post.thumbs_up;
            dislikeCount.textContent = post.thumbs_down;
            
            // Update reaction buttons based on user's previous reaction
            updateReactionButtons(post);
            
            // Load comments
            renderComments(post.comments || []);
            
            // Show modal
            postModal.style.display = 'block';
        }
        
        // Update reaction buttons based on user's previous reaction
        function updateReactionButtons(post) {
            // Reset both buttons
            likeBtn.classList.remove('active');
            dislikeBtn.classList.remove('active');
            
            // Check if user has reacted to this post
            // This would require your backend to return user's reaction status
            // For now, we'll assume no reaction
        }
        
        // Render comments in the modal
        function renderComments(comments) {
            commentList.innerHTML = '';
            
            if (comments.length === 0) {
                commentList.innerHTML = '<p>No comments yet. Be the first to comment!</p>';
                return;
            }
            
            comments.forEach(comment => {
                const commentElement = document.createElement('div');
                commentElement.className = 'comment';
                
                // Process mentions in comment text
                let commentText = comment.comment;
                commentText = commentText.replace(/@(\w+)/g, '<span class="mention">@$1</span>');
                
                commentElement.innerHTML = `
                    <div class="comment-avatar">${comment.username.charAt(0)}</div>
                    <div class="comment-content">
                        <div class="comment-author">${comment.username}</div>
                        <div class="comment-text">${commentText}</div>
                        <div class="comment-time">${comment.timestamp}</div>
                    </div>
                `;
                
                commentList.appendChild(commentElement);
            });
        }
        
        // Check for new notifications
        function checkNotifications() {
            fetch('/api/mentions')
                .then(response => response.json())
                .then(notifications => {
                    if (notifications.length > 0) {
                        notificationBadge.textContent = notifications.length;
                        notificationBadge.style.display = 'flex';
                        renderNotifications(notifications);
                    } else {
                        notificationBadge.style.display = 'none';
                    }
                })
                .catch(error => console.error('Error checking notifications:', error));
        }
        
        // Render notifications
        function renderNotifications(notifications) {
            notificationsList.innerHTML = '';
            
            notifications.forEach(notification => {
                const notificationElement = document.createElement('div');
                notificationElement.className = 'notification';
                notificationElement.innerHTML = `
                    <p>${notification.from_user} mentioned you in a comment on ${notification.report_user}'s post</p>
                    <small>${new Date(notification.created_at).toLocaleString()}</small>
                `;
                
                notificationElement.addEventListener('click', () => {
                    // Mark as read and open the post
                    fetch(`/api/mentions/${notification.id}/read`, { method: 'POST' })
                        .then(() => {
                            loadPostById(notification.report_id);
                            notificationsModal.style.display = 'none';
                            checkNotifications(); // Update badge
                        })
                        .catch(error => console.error('Error marking notification as read:', error));
                });
                
                notificationsList.appendChild(notificationElement);
            });
        }
        
        // Load a specific post by ID
        function loadPostById(postId) {
            fetch(`/api/reports/${postId}`)
                .then(response => response.json())
                .then(data => {
                    openPostModal(data.report);
                })
                .catch(error => console.error('Error loading post:', error));
        }
        
        // Setup event listeners
        function setupEventListeners() {
            // Close modal
            closeModal.addEventListener('click', () => {
                postModal.style.display = 'none';
            });
            
            // Close notifications modal
            closeNotificationsModal.addEventListener('click', () => {
                notificationsModal.style.display = 'none';
            });
            
            // Click outside modal to close
            window.addEventListener('click', (e) => {
                if (e.target === postModal) {
                    postModal.style.display = 'none';
                }
                if (e.target === notificationsModal) {
                    notificationsModal.style.display = 'none';
                }
            });
            
            // Like button
            likeBtn.addEventListener('click', () => {
                reactToPost('up');
            });
            
            // Dislike button
            dislikeBtn.addEventListener('click', () => {
                reactToPost('down');
            });
            
            // Comment submit
            commentSubmit.addEventListener('click', submitComment);
            
            // Notifications button
            notificationsBtn.addEventListener('click', () => {
                notificationsModal.style.display = 'block';
            });
            
            // Logout button
            logoutBtn.addEventListener('click', () => {
                window.location.href = '/logout';
            });
        }
        
        // React to a post
        function reactToPost(type) {
            if (!currentPost) return;
            
            fetch(`/api/reactions/${currentPost.id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ type })
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Reaction failed');
            })
            .then(data => {
                // Update counts
                likeCount.textContent = data.thumbs_up;
                dislikeCount.textContent = data.thumbs_down;
                
                // Update buttons
                if (type === 'up') {
                    likeBtn.classList.add('active');
                    dislikeBtn.classList.remove('active');
                } else {
                    dislikeBtn.classList.add('active');
                    likeBtn.classList.remove('active');
                }
                
                // Update the post in the feed
                updatePostInFeed(currentPost.id, data.thumbs_up, data.thumbs_down);
            })
            .catch(error => {
                console.error('Error reacting to post:', error);
                alert('Unable to react to post. Please try again.');
            });
        }
        
        // Update post in the feed
        function updatePostInFeed(postId, thumbsUp, thumbsDown) {
            const postElement = document.querySelector(`.post-card[data-id="${postId}"]`);
            if (postElement) {
                const likeStat = postElement.querySelector('.stat:nth-child(1) span:last-child');
                const dislikeStat = postElement.querySelector('.stat:nth-child(2) span:last-child');
                
                if (likeStat) likeStat.textContent = thumbsUp;
                if (dislikeStat) dislikeStat.textContent = thumbsDown;
            }
        }
        
        // Submit a comment
        function submitComment() {
            if (!currentPost || !commentInput.value.trim()) return;
            
            const comment = commentInput.value.trim();
            
            fetch(`/api/comments/${currentPost.id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ comment })
            })
            .then(response => {
                if (response.ok) {
                    return response.json();
                }
                throw new Error('Comment failed');
            })
            .then(newComment => {
                // Add the new comment to the list
                const commentElement = document.createElement('div');
                commentElement.className = 'comment';
                
                // Process mentions in comment text
                let commentText = newComment.comment;
                commentText = commentText.replace(/@(\w+)/g, '<span class="mention">@$1</span>');
                
                commentElement.innerHTML = `
                    <div class="comment-avatar">${newComment.username.charAt(0)}</div>
                    <div class="comment-content">
                        <div class="comment-author">${newComment.username}</div>
                        <div class="comment-text">${commentText}</div>
                        <div class="comment-time">${newComment.timestamp}</div>
                    </div>
                `;
                
                commentList.appendChild(commentElement);
                
                // Clear input
                commentInput.value = '';
                
                // Update comment count in the feed
                updateCommentCountInFeed(currentPost.id);
            })
            .catch(error => {
                console.error('Error submitting comment:', error);
                alert('Unable to submit comment. Please try again.');
            });
        }
        
        // Update comment count in the feed
        function updateCommentCountInFeed(postId) {
            const postElement = document.querySelector(`.post-card[data-id="${postId}"]`);
            if (postElement) {
                const commentStat = postElement.querySelector('.stat:nth-child(3) span:last-child');
                const currentCount = parseInt(commentStat.textContent) || 0;
                commentStat.textContent = currentCount + 1;
            }
        }
    </script>
</body>
</html>
